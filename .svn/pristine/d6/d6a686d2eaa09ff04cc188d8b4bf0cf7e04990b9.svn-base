function [eout,thresh] = fn_edge(var,method,dx,dy,magGrad,tangle,thresh)
%This function rewrite from edge.m in MATLAB
% Notice: this function is lack of edge linking, to be finished later 

[m,n] = size(var);
% The output edge map:
e = false(m,n);
if strcmp(method,'canny') || strcmp(method,'canny_new')
% Used for selecting thresholds
PercentOfPixelsNotEdges = 0.7; 
% Low thresh is this fraction of the high.
ThresholdRatio = 0.4;          
% Determine Hysteresis Thresholds
[lowThresh, highThresh] = selectThresholds(thresh, magGrad, PercentOfPixelsNotEdges, ThresholdRatio);
thresh =[lowThresh, highThresh];
end
if strcmp(method,'canny')
    % using matlab internal function
    % Perform Non-Maximum Suppression Thining and Hysteresis Thresholding of Edge Strength
    e = thinAndThreshold(e, dx, dy, magGrad, lowThresh, highThresh);
elseif strcmp(method,'canny_new')
    canny1=zeros(m,n);
    canny2=zeros(m,n);
    bin=zeros(m,n);
    [sector]=sector_dividing(tangle);
    for im=2:m-1
        for in=2:n-1
            if sector(im,in)==1
                if ( magGrad(im,in)>magGrad(im+1,in) && magGrad(im,in)>magGrad(im-1,in) )
                    canny1(im,in)=magGrad(im,in);
                else
                    canny1(im,in)=0;
                end
            elseif sector(im,in)==2
                if ( magGrad(im,in)>magGrad(im+1,in+1) && magGrad(im,in)>magGrad(im-1,in-1) )
                    canny1(im,in)=magGrad(im,in);
                else
                    canny1(im,in)=0;
                end
            elseif sector(im,in)==3
                if ( magGrad(im,in)>magGrad(im,in+1) && magGrad(im,in)>magGrad(im,in-1) )
                    canny1(im,in)=magGrad(im,in);
                else
                    canny1(im,in)=0;
                end
            elseif sector(im,in)==4
                if ( magGrad(im,in)>magGrad(im+1,in-1) && magGrad(im,in)>magGrad(im-1,in+1) )
                    canny1(im,in)=magGrad(im,in);
                else
                    canny1(im,in)=0;
                end      
            end
        end
    end
%---------------------------------
%双阈值检测
    for im = 2:(m-1)
        for in = 2:(n-1)        
            if canny1(im,in)<lowThresh %低阈值处理
                canny2(im,in) = 0;
                bin(im,in) = 0;
                continue;
            elseif canny1(im,in)>highThresh %高阈值处理
                canny2(im,in) = canny1(im,in);
                bin(im,in) = 1;
                continue;
            else %介于之间的看其8领域有没有高于高阈值的，有则可以为边缘
                neighbor8 =[canny1(im-1,in-1), canny1(im-1,in), canny1(im-1,in+1);
                           canny1(im,in-1),    canny1(im,in),   canny1(im,in+1);
                           canny1(im+1,in-1), canny1(im+1,in), canny1(im+1,in+1)];
                temMax = max(neighbor8(:));
                if temMax > highThresh
                    canny2(im,in) = temMax(1);
                    bin(im,in) = 1;
                    continue;
                else
                    canny2(im,in) = 0;
                    bin(im,in) = 0;
                    continue;
                end
            end
        end
    end

end
e=bin;
if nargout==0,
    imshow(e);
else
    eout = e;
end

end

